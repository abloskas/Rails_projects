{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 LucidaGrande;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 Monaco;\f5\fnil\fcharset0 AndaleMono;
}
{\colortbl;\red255\green255\blue255;\red48\green61\blue72;\red63\green63\blue63;\red255\green255\blue255;
\red17\green136\blue187;\red64\green131\blue205;\red191\green179\blue203;\red39\green133\blue97;\red255\green255\blue0;
\red48\green61\blue72;\red63\green63\blue63;\red17\green136\blue187;\red255\green255\blue255;\red11\green13\blue26;
\red157\green101\blue255;\red95\green95\blue95;\red244\green0\blue95;\red224\green213\blue97;\red152\green224\blue36;
\red88\green209\blue235;\red100\green100\blue100;\red38\green38\blue38;\red242\green242\blue242;\red0\green0\blue0;
\red184\green14\blue61;\red247\green238\blue241;}
{\*\expandedcolortbl;;\cssrgb\c24314\c30588\c35294;\cssrgb\c31373\c31373\c31373;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c60392\c78039;\cssrgb\c30980\c59216\c84314;\cssrgb\c79608\c75686\c83529;\cssrgb\c17647\c58431\c45490;\csgenericrgb\c100000\c100000\c0;
\cssrgb\c24314\c30588\c35294;\cssrgb\c31373\c31373\c31373;\cssrgb\c0\c60392\c78039;\cssrgb\c100000\c100000\c100000;\cssrgb\c4314\c6275\c13333;
\cssrgb\c68235\c50588\c100000;\cssrgb\c44706\c44706\c44706;\cssrgb\c97647\c14902\c44706;\cssrgb\c90196\c85882\c45490;\cssrgb\c65098\c88627\c18039;
\cssrgb\c40000\c85098\c93725;\cssrgb\c46667\c46667\c46667;\cssrgb\c20000\c20000\c20000;\cssrgb\c96078\c96078\c96078;\cssrgb\c0\c0\c0;
\cssrgb\c78039\c14510\c30588;\cssrgb\c97647\c94902\c95686;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid602\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww18720\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\sa80\partightenfactor0

\f0\b\fs28 \cf2 \expnd0\expndtw0\kerning0
EX: Create a new rails project: rails new \{\{Project_name\}\}\
	1. After, open project in VS and open gems file  \
	2. add gem \'91hirb\'92 \
	3. bundle install\
EX: Create rails model(s): rails g model User first_name:string last_name:string email:string etc.\
EX: Create rails controller(s): rails g controller Users index show new edit\
\
Iterating through a collection (example):\

\b0\fs24 <% @products.each do |product| %>\
  <p><%= product.name %></p>\
  <p><%= product.description %></p>\
<% end %>\
\

\b\fs28 Showing model validation errors in the views (example):\
<% if @product.errors.any? %>\
  <div id="error_explanation">\
    <h2><%= pluralize(@product.errors.count, "error")%>prohibited this post from being saved:</h2>\
    <ul>\
      <% @product.errors.full_messages.each do |msg| %>\
        <li><%= msg %></li>\
      <% end %>\
    </ul>\
  </div>\
<% end %>\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\

\b\fs36 Secret code:\

\b0\fs24 \
Start with:\
\
def create\
  @product = Product.create( name: params[:name], description: params[:description])\
  #this redirect only applies for when the product was successfully created! You'll have to modify this  code with an if statement to RENDER the new view IF there are errors ELSE REDIRECT to the products view if there weren't errors.\
  redirect_to '/products'\
end\
\
\
Then:\
def create\
  @product =copy Product.create( product_params )\
  redirect_to '/products'\
end\
private \
  def product_params\
   params.require(:product).permit(:name, :description)\

\b AN EXAMPLE:\
def create\
  @product = Product.create( product_params )\
  redirect_to '/products'\
end\
def update\
  @product = Product.update( product_params )\
  redirect_to '/products'\
end\
private \
  def product_params\
   params.require(:product).permit(:name, :description)\
  end\
\
\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf3 \expnd0\expndtw0\kerning0
Helpers: 
\b0 \cb4 \'a0{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/routing.html"}}{\fldrslt \cf5 http://guides.rubyonrails.org/routing.html}}\cb1 \
Creating a resourceful route will also expose a number of helpers to the controllers and views in your application. In the case of\'a0
\i resources :photos
\i0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\partightenfactor0
\ls1\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
photos_path
\b0 \cf3 \'a0returns /photos\
\ls1\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
new_photo_path
\b0 \cf3 \'a0returns /photos/new\
\ls1\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
edit_photo_path(:id)
\b0 \cf3 \'a0returns /photos/:id/edit\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl504\partightenfactor0
\ls1\ilvl1\cf3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
for instance
\i ,edit_photo_path(10)
\i0 \'a0returns\'a0
\i /photos/10/edit
\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\partightenfactor0
\ls1\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
photo_path(:id)\'a0
\b0 \cf3 returns /photos/:id\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl504\partightenfactor0
\ls1\ilvl1\cf3 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
for instance,\'a0
\i photo_path(10)
\i0 \'a0returns\'a0
\i /photos/10\
\pard\tx720\tx1440\pardeftab720\sl504\partightenfactor0

\i0 \cf3 \

\b Then,\
rake routes
\b0 \
\
\pard\pardeftab720\sl340\partightenfactor0

\b \cf3 \cb4 This allows you to do something like below:
\b0 \cb1 \
\pard\tx720\tx1440\pardeftab720\sl504\partightenfactor0
\cf3 def create\
  ..\
  redirect_to photos_path\
end\
def update\
  ..\
  redirect_to edit_photo_path(params[:id])\
end\
\
\pard\tx720\tx1440\pardeftab720\sl504\partightenfactor0
{\field{\*\fldinst{HYPERLINK "file:///Users/abloskas/Downloads/rails-scaffolding-guidelines.pdf"}}{\fldrslt \cf3 file:///Users/abloskas/Downloads/rails-scaffolding-guidelines.pdf}}\
\
\pard\tx720\tx1440\pardeftab720\sl504\partightenfactor0

\b \cf3 Hashing data:\
	Form: \
<form action='/users/' method='post'>\
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0\fs24 \cf6 <\cf7 input type\cf6 =\cf8 "hidden"\cf7  name\cf6 =\cf8 "authenticity_token"\cf7  value\cf6 =\cf8 "<%= form_authenticity_token%>"\cf6 >
\f0\b\fs28 \cf3 \
\pard\tx720\tx1440\pardeftab720\sl504\partightenfactor0
\cf3   <input type='text' name='user[first_name]' />\
  <input type='text' name='user[last_name]' />\
  <input type='text' name='user[email]' />\
  <input type='text' name='user[birthday]' />\
  <input type='text' name='user[age]' />\
  <input type='text' name='user[birth_place]' />\
  <input type='text' name='user[hobbies]' />\
  <input type='text' name='user[favorite_food]' />\
  ...\
</form>\
\
	then in models:\
class UsersControllers < ApplicationController\
  def create\
    \cb9 @user = User.create(user_params)\cb1 \
  end\
  def update\
    @user = User.find(params[:id])\
    @user.update\cb9 (user_params)\cb1 \
  end\
  private\
    \cb9 def user_params\
      params.require(:user).permit(:first_name, :last_name, :email, :birthday, :age, :birth_place, :hobbies, :favorite_food)\
    end\
\cb1 end\

\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 \

\b CSFR Token addition:
\b0 \
class ApplicationController < ActionController::Base\
  # Prevent CSRF attacks by raising an exception.\
  # For APIs, you may want to use :null_session instead.\
  protect_from_forgery with: :exception\
end\
\
\
PATCH Method: \
\pard\pardeftab720\sl340\partightenfactor0

\f0\fs28 \cf3 \cb4 \expnd0\expndtw0\kerning0
If you don't know how to make your form for the edit/update routes using the correct HTTP method, fear not. By adding a hidden element to your form containing the following code:\
<form action="/blogs/<%= blog.id %>" method="post">\
\'a0\'a0\'a0\'a0<input type="hidden" name="_method" value="patch">\
</form>\
You can achieve the correct result. What happens here is that most browsers (Chrome included)
\b \cf2 , will only allow GET and POST
\b0 \cf3 requests to be sent. This code basically pre-packages a\'a0
\b \cf2 PATCH
\b0 \cf3 \'a0request that can be unwrapped by a Rails server.\
\
DELETE Method:\
Another key RESTful tool that is much harder to make from scratch ( ie, without scaffolds) is sending a DELETE HTTP request. If you're using Rails 4 (this sometimes works for Rails 3), you can make this happen by using a link that resembles the following. In this example, we are using blogs as our\'a0
\i resource:\

\f1\i0\fs24 <a href="/blogs/<%= blog.id %>" data-method="delete">Delete this blog!</a>\
\cf0 \cb1 \kerning1\expnd0\expndtw0 \

\f0\fs28 \cf3 \cb4 \expnd0\expndtw0\kerning0
Notice that we embed some Ruby code in our\'a0
\b \cf2 href attribute
\b0 \cf3 . You could just hard code a number in there like\'a0
\i "blogs/5"
\i0 \'a0but we normally use a tool like this from within an iterator loop (like\'a0
\b \cf2 .each
\b0 \cf3 , for instance). This works because of a JavaScript file included in the scaffolding code, which automatically looks for\'a0
\b \cf2 data-method
\b0 \cf3 \'a0in the anchor tag and submits a post with the
\b \cf2 \'a0_method
\b0 \cf3 \'a0parameter set to delete, like in the form above.\
{\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/4606860/rails-3-link-to-to-destroy-not-working?rq=1"}}{\fldrslt https://stackoverflow.com/questions/4606860/rails-3-link-to-to-destroy-not-working?rq=1}}\
\
Session:\
\
class UsersController < ApplicationController\
  def create\
    #adds the value in params[:id] to the :id key in session\
    session[:id] = params[:id] #we will talk about params in a bit\
  end\
  def log_out\
    #sets the session[:id] to nil, overwriting the previous value\
    session[:id] = nil\
  end\
end\
\
\pard\pardeftab720\sl340\partightenfactor0

\b\fs36 \cf3 Layouts:
\b0\fs28 \
\pard\pardeftab720\sl760\sa80\partightenfactor0

\b\fs36 \cf10 \cb1 \outl0\strokewidth0 \strokec10 Finding Layouts\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 If we do not want the default behavior, we can declare layout options in the controller. For example, in our\'a0
\i app/views/layouts
\i0 \'a0folder, we will have the following files:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\partightenfactor0
\ls2\ilvl0\cf11 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 application.html.erb\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 dojos.html.erb\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 students.html.erb\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i\b \cf10 \strokec10 app/controllers/students_controller.rb
\i0\b0 \cf11 \strokec11 \
\pard\pardeftab720\sl340\partightenfactor0
\cf3 \cb4 \outl0\strokewidth0 \
\
\
class StudentsController < ApplicationController\
  # only the index and the new action will be loaded through app/views/layouts/dojos.html.erb\
  layout "dojos", only: [:profile, :info]\
  \
  def index\
    # renders with app/views/layouts/students.html.erb\
  end\
  \
  def new\
    # renders with app/views/layouts/students.html.erb\
  end\
  \
  def profile\
    # renders with app/views/layouts/dojos.html.erb\
  end\
  \
  def info\
    # renders with app/views/layouts/dojos.html.erb  \
  end\
  \
  def hello_world\
    render layout: "application"\
     # renders with app/views/layouts/application.html.erb\
  end\
end \
\
\pard\pardeftab720\sl760\sa80\partightenfactor0

\b\fs36 \cf10 \cb1 \outl0\strokewidth0 \strokec10 Structuring Layouts\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 Now that we know how to render views through layouts, our next step is to structure the layout files. Let's take a look at the\'a0
\i app/views/layouts/application.html.erb
\i0 \'a0file for example.\
\pard\pardeftab720\sl340\partightenfactor0
\cf3 \cb4 \strokec3 <!DOCTYPE html>\
<html>\
<head>\
  <title>DojoDashboard</title>\
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>\
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>\
  <%= csrf_meta_tags %>\
</head>\
<body>\
<%= yield %>\
</body>\
</html>\outl0\strokewidth0 \
\
\pard\pardeftab720\sl504\sa200\partightenfactor0
\cf11 \cb1 \outl0\strokewidth0 \strokec11 There are three main components that make up a layout file.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\partightenfactor0
\ls3\ilvl0\cf11 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Asset tag helpers\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Using\'a0
\i yield
\i0 \'a0and\'a0
\i content_for
\i0 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Using partials\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 Asset Tag Helpers\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 These helpers are methods that generate HTML for all types of assets. In total, there are 6 helpers:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\partightenfactor0
\ls4\ilvl0\cf11 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 auto_discovery_link_tag (for RSS or Atom feeds)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 javascript_include_tag (linking Javascript files)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 stylesheet_link_tag (linking to CSS files)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 image_tag (linking to image files)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 video_tag (linking to video files)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 audio_tag (linking to audio files)\
\pard\pardeftab720\sl504\sa200\partightenfactor0
\cf11 For documentation and examples, you can check out the\'a0{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html"}}{\fldrslt \cf12 \strokec12 AssetTagHelper}}\'a0API\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 yield and content_for\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 Think of yield as a small section of the layout that the view can insert dynamically. In the example picture above, we have a\'a0
\i <%= yield %>
\i0 \'a0in between the body tags. Each view that gets rendered through the application layout is being inserted there.\
We can also have our own yields and dynamically feed data through\'a0
\i content_for
\i0 .\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i\b \cf10 \strokec10 app/views/layouts/students.html.erb
\i0\b0 \cf11 \strokec11 \
\pard\pardeftab720\sl340\partightenfactor0
\cf11 <!DOCTYPE html>\
<html>\
<head>\
  <!-- Dynamically add a title -->\
  <title><%= yield :title %></title>\
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>\
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>\
  <%= csrf_meta_tags %>\
  \
  <!-- Dynamically add some Javascript -->\
  <script type="text/javascript">\
      <%= yield :some_javascript %>\
  </script>  \
</head>\
<body>\
<%= yield %>\
</body>\
</html>\
\
\pard\pardeftab720\sl340\partightenfactor0

\i\b \cf10 \cb13 \strokec10 app/views/users/index.html.erb
\i0\b0 \cf11 \cb1 \strokec11 \
<% content_for :title, "All Users" %>\
<% content_for :some_javascript do %>\
    alert("This alert comes from the all users page");\
<% end %>\
<h1>Listing all users</h1>\
<p>This is where you would have some code to display all the users</p>\
\

\i\b \cf10 \cb13 \strokec10 app/views/users/new.html.erb\

\i0\b0 <% content_for :title, "New User" %>\
<% content_for :some_javascript do %>\
    alert("This alert comes from the new user page");\
<% end %>\
<h1>New User</h1>\
<p>This is where you would have a form to create a new user</p>
\i\b \
\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\i0 \cf10 \cb1 Partial Templates\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 Usually, partials are chunks of code that can be used across multiple views. A prime example is a navigation bar. Instead of having a nav-bar in every single view, we can move it into one partial template that can be shared with across as many views as you want. Remember, we are always trying to keep our code DRY.\
Partials have a unique naming convention. They start with an underscore to distinguish them from other views. Depending on their use case, you can save them in the same folder of the name of your resource or you can create a whole new folder.\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i\b \cf10 \strokec10 app/views/shared/_header.html.erb
\i0\b0 \cf11 \strokec11 \
\pard\pardeftab720\partightenfactor0
\cf11 <header>\
    <h1>This can be a header shared by multiple views</h1>\
<header>\
\
\pard\pardeftab720\sl340\partightenfactor0

\i\b \cf10 \cb13 \strokec10 app/views/shared/_footer.html.erb\

\i0\b0 <footer>\
    <h1>This can be a footer shared by multiple views</h1>\
<footer>
\i\b \
\
app/views/users/student_partial.html.erb\

\i0\b0 <div>\
    <p>A paragraph that needs to be in all views for the students resource</p>\
</div>
\i\b \
\
app/views/users/index.html.erb\

\i0\b0 <!-- rendering the header partial from another folder. Notice the omission of the underscore -->\
<%= render "shared/header" %>\
<h1>This is the index view for all the students</h1>\
<!-- rendering the user_partial from the same folder. -->\
<%= render "student_partial" %>\
<!-- rendering the footer partial from another folder. -->\
<%= render "shared/footer" %>\
\

\b \ul **SEE LAYOUTS ASSIGNMENT***
\b0 \ulnone \
\
\pard\pardeftab720\sl800\sa60\partightenfactor0

\b\fs48 \cf10 \cb1 Asset Pipeline\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 The Asset Pipeline is a feature of rails that minifies or compresses CSS and Javascript assets. Let's say that you have to include 50 javascript files and 50 CSS files. Naturally, it takes time for your browser to request and load all 100 files. There are three main features of the asset pipeline:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\partightenfactor0
\ls5\ilvl0\cf11 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 It concatenates all JavaScript into one master .js file and all CSS files into one master .css file.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 It minifies and compresses your asset files so that they are the smallest size possible.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 It allows you\'a0to use Sass for CSS, CoffeeScript for JavaScript, and ERB.\
\pard\pardeftab720\sl760\sa80\partightenfactor0

\b\fs36 \cf10 \strokec10 Where to put images, CSS, and JavaScript\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 Like most MVC frameworks, Rails provides a place for your assets. Most of the time, you will put your CSS, JavasScript and Image files in\'a0
\i\b \cf10 \strokec10 app/assets
\i0\b0 \cf11 \strokec11 . You will notice that when you create a controller with the generator, for example:\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 rails generate controller \cf15 \strokec15 Users\cf13 \strokec13 \
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 Rails creates a CoffeeScript file (
\i\b \cf10 \strokec10 app/assets/javascripts/users.coffee
\i0\b0 \cf11 \strokec11 ) and a sass file (
\i\b \cf10 \strokec10 app/assets/javascripts/users.scss
\i0\b0 \cf11 \strokec11 ). Now, these files are automatically ready to use by your app through the\'a0
\i require_tree
\i0 \'a0directive. You can find the directive in\'a0
\i\b \cf10 \strokec10 app/assets/javascripts/application.js
\i0\b0 \cf11 \strokec11 \'a0and\'a0
\i\b \cf10 \strokec10 app/assets/stylesheets/application.css
\i0\b0 \cf11 \strokec11 .\
The key concept to understand is that all the images, CSS, and JavaScript files should go to the\'a0
\i app/assets/
\i0 \'a0folder. Whatever files you put in there will get compiled to be placed eventually in\'a0
\i public/assets/
\i0 \'a0folder. For example, if you placed\'a0
\i pacman.png
\i0 \'a0inside\'a0
\i /app/assets/images/
\i0 \'a0folder, this will later be compiled to be placed in\'a0
\i /public/assets/
\i0 \'a0folder. Note that it's not in\'a0
\i /public/assets/images
\i0 \'a0folder but simply all in\'a0
\i /public/assets/
\i0 \'a0(in other words, all CSS and JavaScript files after they are compiled and timestamped properly will be placed in\'a0
\i public/assets
\i0 \'a0folder).\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 ERB\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 The asset pipeline also allows you to put Ruby code through ERB. Simply add the\'a0
\b \cf10 \strokec10 .erb
\b0 \cf11 \strokec11 \'a0extension to your coffee and sass files. For example:\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i\b \cf10 \strokec10 app/assets/stylesheets/users.scss.erb
\i0\b0 \cf11 \strokec11 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf16 \cb14 \strokec16 #header \{\cf13 \strokec13 \
  background\cf17 \strokec17 -\cf13 \strokec13 image: url(\cf17 \strokec17 <\cf13 \strokec13 %\cf17 \strokec17 =\cf13 \strokec13  asset_path \cf18 \strokec18 'banner.png'\cf13 \strokec13  %\cf17 \strokec17 >\cf13 \strokec13 ) \
\}\
\pard\pardeftab720\sl340\partightenfactor0

\f0\fs28 \cf3 \cb4 \outl0\strokewidth0 \
\pard\pardeftab720\sl340\partightenfactor0

\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \

\b\fs36 Form Helpers:\
\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\b0\fs28 \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 The form helpers are especially useful to let Rails handle creating forms based on your model. To cite the example of the API documentation:\
The following code...\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf17 \cb14 \strokec17 <%=\cf13 \strokec13  form_for \cf15 \strokec15 :person\cf13 \strokec13 , \cf19 \strokec19 @person\cf13 \strokec13 , \cf15 \strokec15 :url\cf13 \strokec13  \cf17 \strokec17 =>\cf13 \strokec13  \{ \cf15 \strokec15 :action\cf13 \strokec13  \cf17 \strokec17 =>\cf13 \strokec13  \cf18 \strokec18 "create
\fs24 "
\fs25\fsmilli12600 \cf13 \strokec13  \} \cf17 \strokec17 do\cf13 \strokec13  \cf17 \strokec17 |\cf13 \strokec13 f\cf17 \strokec17 |\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 <%=\cf13 \strokec13  f.text_field \cf15 \strokec15 :first_name\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 <%=\cf13 \strokec13  f.text_field \cf15 \strokec15 :last_name\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 <%=\cf13 \strokec13  submit_tag \cf18 \strokec18 'Create'\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\cf17 \strokec17 <%\cf13 \strokec13  \cf17 \strokec17 end\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 generates this HTML.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf17 \cb14 \strokec17 <\cf13 \strokec13 form action\cf17 \strokec17 =\cf18 \strokec18 "/persons/create" method="post"\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 input id\cf17 \strokec17 =\cf18 \strokec18 "person_first_name" name="person[first_name]" size="30" type="text"\cf13 \strokec13  \cf17 \strokec17 />\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 input id\cf17 \strokec17 =\cf18 \strokec18 "person_last_name" name="person[last_name]" size="30" type="text"\cf13 \strokec13  \cf17 \strokec17 />\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 input name\cf17 \strokec17 =\cf18 \strokec18 "commit" type="submit" value="Create"\cf13 \strokec13  \cf17 \strokec17 />\cf13 \strokec13 \
\cf17 \strokec17 </\cf13 \strokec13 form\cf17 \strokec17 >\cf13 \strokec13 \
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 All that these tools are doing is helping you generate proper HTML from the Ruby Model/objects. In fact, you don't need to use any of these helpers and we think it's actually better (educationally) if you don't use the form helpers in the beginning. This will help you understand what is happening behind the scene. Also, we have seen many developers get stuck on trying to get the form helpers to work; that it would have saved them a lot of time if they just wrote the HTML output directly (instead of relying on these form helpers to generate the HTML for you).\
For now, go through these form helpers quickly just to get a high-level understanding what may be happening and later, you can decide to use these form helpers if you would like.\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 Using Rail's Default Form Helper\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 The default form helper that's available in Rails starts by using the
\i \'a0form_for
\i0 \'a0method. You can pass an instance of the model and it will create the label like\'a0
\i input type='text'\'a0
\i0 or other form fields for you. Again, there is no magic here. It's just taking what you supply and, at the end, creating an HTML output which you would also be able to see if you have the Rails server render this page. Use Google Chrome to right click and go to '
\b \cf10 \strokec10 View Page Source
\b0 \cf11 \strokec11 ' to see this.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf17 \cb14 \strokec17 <%=\cf13 \strokec13  form_for(\cf19 \strokec19 @post\cf13 \strokec13 ) \cf17 \strokec17 do\cf13 \strokec13  \cf17 \strokec17 |\cf13 \strokec13 f\cf17 \strokec17 |\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 <%\cf13 \strokec13  \cf17 \strokec17 if\cf13 \strokec13  \cf19 \strokec19 @post\cf13 \strokec13 .errors.any? \cf17 \strokec17 %>\cf13 \strokec13 \
   \cf17 \strokec17 <\cf13 \strokec13 div id\cf17 \strokec17 =\cf18 \strokec18 "error_explanation
\fs24 "
\fs25\fsmilli12600 \cf17 \strokec17 >\cf13 \strokec13 \
     \cf17 \strokec17 <\cf13 \strokec13 h2>\cf17 \strokec17 <%=\cf13 \strokec13  pluralize(\cf19 \strokec19 @post\cf13 \strokec13 .errors.count, \cf18 \strokec18 "error
\fs24 "
\fs25\fsmilli12600 \cf13 \strokec13 ) \cf17 \strokec17 %\cf13 \strokec13 >\cf17 \strokec17 </\cf13 \strokec13 h2\cf17 \strokec17 >\cf13 \strokec13 \
     \cf17 \strokec17 <\cf13 \strokec13 ul\cf17 \strokec17 >\cf13 \strokec13 \
        \cf17 \strokec17 <%\cf13 \strokec13  \cf19 \strokec19 @post\cf13 \strokec13 .errors.full_messages.each \cf17 \strokec17 do\cf13 \strokec13  \cf17 \strokec17 |\cf13 \strokec13 msg\cf17 \strokec17 |\cf13 \strokec13  \cf17 \strokec17 %=>\cf13 \strokec13 \
        \cf17 \strokec17 <\cf13 \strokec13 li>\cf17 \strokec17 <%=\cf13 \strokec13  msg \cf17 \strokec17 %\cf13 \strokec13 >\cf17 \strokec17 </\cf13 \strokec13 li\cf17 \strokec17 >\cf13 \strokec13 \
        \cf17 \strokec17 <%\cf13 \strokec13  \cf17 \strokec17 end\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
      \cf17 \strokec17 </\cf13 \strokec13 ul\cf17 \strokec17 >\cf13 \strokec13 \
   \cf17 \strokec17 </\cf13 \strokec13 div\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <%\cf13 \strokec13  \cf17 \strokec17 end\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 div \cf17 \strokec17 class=\cf18 \strokec18 "field
\fs24 "
\fs25\fsmilli12600 \cf17 \strokec17 >\cf13 \strokec13 \
    \cf17 \strokec17 <%=\cf13 \strokec13  f.label \cf15 \strokec15 :name\cf13 \strokec13  \cf17 \strokec17 %\cf13 \strokec13 >\cf17 \strokec17 <\cf13 \strokec13 br \cf17 \strokec17 />\cf13 \strokec13 \
    \cf17 \strokec17 <%=\cf13 \strokec13  f.text_field \cf15 \strokec15 :name\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 </\cf13 \strokec13 div\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 div \cf17 \strokec17 class=\cf18 \strokec18 "field
\fs24 "
\fs25\fsmilli12600 \cf17 \strokec17 >\cf13 \strokec13 \
    \cf17 \strokec17 <%=\cf13 \strokec13  f.label \cf15 \strokec15 :title\cf13 \strokec13  \cf17 \strokec17 %\cf13 \strokec13 >\cf17 \strokec17 <\cf13 \strokec13 br \cf17 \strokec17 />\cf13 \strokec13 \
    \cf17 \strokec17 <%=\cf13 \strokec13  f.text_field \cf15 \strokec15 :title\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 </\cf13 \strokec13 div\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 div \cf17 \strokec17 class=\cf18 \strokec18 "field
\fs24 "
\fs25\fsmilli12600 \cf17 \strokec17 >\cf13 \strokec13 \
    \cf17 \strokec17 <%=\cf13 \strokec13  f.label \cf15 \strokec15 :content\cf13 \strokec13  \cf17 \strokec17 %\cf13 \strokec13 >\cf17 \strokec17 <\cf13 \strokec13 br \cf17 \strokec17 />\cf13 \strokec13 \
    \cf17 \strokec17 <%=\cf13 \strokec13  f.text_area \cf15 \strokec15 :content\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 </\cf13 \strokec13 div\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 div \cf17 \strokec17 class=\cf18 \strokec18 "actions
\fs24 "
\fs25\fsmilli12600 \cf17 \strokec17 >\cf13 \strokec13 \
    \cf17 \strokec17 <%=\cf13 \strokec13  f.submit \cf17 \strokec17 %>\cf13 \strokec13 \
  \cf17 \strokec17 </\cf13 \strokec13 div\cf17 \strokec17 >\cf13 \strokec13 \
\cf17 \strokec17 <%\cf13 \strokec13  \cf17 \strokec17 end\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
 \
\pard\pardeftab720\sl760\sa80\partightenfactor0

\f0\b\fs36 \cf10 \cb1 \strokec10 Simple Forms\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 A simple form is a neat tool that makes form creation a lot easier! By identifying the column type for each field (whether it's string, number, foreign key to another table, text area, etc), it can quickly identify whether you need <
\i input type='text'>, <textarea>, <select>,
\i0 \'a0etc. For a web application that has a lot of information that needs to be filled out and which can get saved directly in the model, using
\i \'a0simple_form
\i0 \'a0could save you a lot of time and headaches.\
All these tools/gems are super useful if you use it for exactly what they are built for but as soon as you need to customize some features and do something that the original gem/tool wasn't quite built for, you may end up spending hours/days tweaking something only to realize that it may have been way faster if you didn't use the gem at all. However, if you again use it for exactly what the gem was built for, it could save you a lot of time.\
\pard\pardeftab720\sl760\sa80\partightenfactor0

\b\fs36 \cf10 \strokec10 full documentation:\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/plataformatec/simple_form"}}{\fldrslt \cf12 \strokec12 https://github.com/plataformatec/simple_form}}\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\fs28 \cf10 Example of using simple_form to build the form above\
\pard\pardeftab720\sl340\partightenfactor0

\f4\b0\fs25\fsmilli12600 \cf17 \cb14 \strokec17 <%=\cf13 \strokec13  simple_form_for \cf19 \strokec19 @post\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \cf17 \strokec17 |\cf13 \strokec13 f\cf17 \strokec17 |\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\cf17 \strokec17 <%=\cf13 \strokec13  f.input \cf15 \strokec15 :name\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\cf17 \strokec17 <%=\cf13 \strokec13  f.input \cf15 \strokec15 :title\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\cf17 \strokec17 <%=\cf13 \strokec13  f.input \cf15 \strokec15 :content\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\cf17 \strokec17 <%=\cf13 \strokec13  f.button \cf15 \strokec15 :submit\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\cf17 \strokec17 <%\cf13 \strokec13  \cf17 \strokec17 end\cf13 \strokec13  \cf17 \strokec17 %>\cf13 \strokec13 \
\
\pard\pardeftab720\sl800\sa60\partightenfactor0

\f0\b\fs48 \cf10 \cb1 \strokec10 \

\fs72 RSpec Methods
\fs48 \
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 The RSpec library provides methods that are called to test ruby code. Here is a description of the most used methods.\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\b\fs32 \cf10 \strokec10 describe\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 The purpose of describe method is to wrap a set of tests against one functionality. For example, we can use the describe method to group together all the tests associated with buying soda.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 RSpec.describe \cf18 \strokec18 "Buy a soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
  \cf16 \strokec16 # test code here\cf13 \strokec13 \
end\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f0\b\fs32 \cf10 \cb1 \strokec10 context\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 The purpose of context is very similar to describe, but the key difference is that it groups together a set of tests against one functionality under the same state. We will use\'a0
\i context
\i0 \'a0when testing bigger projects, or when dealing with objects that have different states.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 RSpec.describe \cf18 \strokec18 "Buy a soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
    context \cf18 \strokec18 "has money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
        \cf16 \strokec16 # test code here\cf13 \strokec13 \
    end\
    context \cf18 \strokec18 "doesn't have money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
        \cf16 \strokec16 # test code here\cf13 \strokec13 \
    end\
end\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f0\b\fs32 \cf10 \cb1 \strokec10 it\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 The purpose of\'a0
\i it
\i0 \'a0is to describe the specific functionality you're testing in any given context. It is important to be as descriptive as you can because it will help you identify which test have failed or passed.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 RSpec.describe \cf18 \strokec18 "Buy a soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
    context \cf18 \strokec18 "has money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
        it \cf18 \strokec18 "buy the soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
            \cf16 \strokec16 # test to try to buy soda with some money\cf13 \strokec13 \
        end\
    end\
    context \cf18 \strokec18 "doesn't have money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
        it \cf18 \strokec18 "can't buy the soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
            \cf16 \strokec16 # test to try to buy soda without money\cf13 \strokec13 \
        end\
    end\
end\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f0\b\fs32 \cf10 \cb1 \strokec10 expect\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 We can make several different assertions with RSpec. The one that we will be focusing on is\'a0
\i expect
\i0 . In this case, we will be using\'a0
\i expect
\i0 \'a0to establish what the intended outcome of a particular method call should be.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 RSpec.describe \cf18 \strokec18 "Buy a soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
    context \cf18 \strokec18 "has money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
        it \cf18 \strokec18 "buy the soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
            buyer \cf17 \strokec17 =\cf13 \strokec13  Buyer.\cf17 \strokec17 new\cf13 \strokec13 \
            buyer.money \cf17 \strokec17 =\cf13 \strokec13  \cf15 \strokec15 10\cf13 \strokec13 \
            \cf20 \strokec20 expect\cf13 \strokec13 (buyer.buy_soda).to \cf20 \strokec20 eq\cf13 \strokec13 (\cf15 \strokec15 true\cf13 \strokec13 )\
        end\
    end\
    context \cf18 \strokec18 "doesn't have money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
        it \cf18 \strokec18 "can't buy the soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
            buyer \cf17 \strokec17 =\cf13 \strokec13  Buyer.\cf17 \strokec17 new\cf13 \strokec13 \
            buyer.money \cf17 \strokec17 =\cf13 \strokec13  \cf15 \strokec15 0\cf13 \strokec13 \
            \cf20 \strokec20 expect\cf13 \strokec13 (buyer.buy_soda).to \cf20 \strokec20 eq\cf13 \strokec13 (\cf15 \strokec15 false\cf13 \strokec13 )\
        end\
    end\
end\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f0\b\fs32 \cf10 \cb1 \strokec10 before\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i\b0\fs28 \cf11 \strokec11 before
\i0 \'a0runs the given block of code before each test.\'a0
\i before
\i0 \'a0will help keep you from repeating code. We will be using\'a0
\i before
\i0 \'a0to run a block of code before each "context" statement and before each "it" statement.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 RSpec.describe \cf18 \strokec18 "Buy a soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
    \cf20 \strokec20 before\cf13 \strokec13 (:each) \cf17 \strokec17 do\cf13 \strokec13  \
        @buyer \cf17 \strokec17 =\cf13 \strokec13  Buyer.\cf17 \strokec17 new\cf13 \strokec13 \
    end\
    \
    context \cf18 \strokec18 "has money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
        \cf20 \strokec20 before\cf13 \strokec13 (:each) \cf17 \strokec17 do\cf13 \strokec13  \
            @buyer.money \cf17 \strokec17 =\cf13 \strokec13  \cf15 \strokec15 10\cf13 \strokec13 \
        end \
        it \cf18 \strokec18 "can buy a soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
            \cf20 \strokec20 expect\cf13 \strokec13 (@buyer.buy_soda).to \cf20 \strokec20 eq\cf13 \strokec13 (\cf15 \strokec15 true\cf13 \strokec13 )\
        end\
    end\
    context \cf18 \strokec18 "doesn't have money"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
        \cf20 \strokec20 before\cf13 \strokec13 (:each) \cf17 \strokec17 do\cf13 \strokec13  \
            @buyer.money \cf17 \strokec17 =\cf13 \strokec13  \cf15 \strokec15 0\cf13 \strokec13 \
        end     \
        it \cf18 \strokec18 "can't buy a soda"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
            \cf20 \strokec20 expect\cf13 \strokec13 (@buyer.buy_soda).to \cf20 \strokec20 eq\cf13 \strokec13 (\cf15 \strokec15 false\cf13 \strokec13 )\
        end\
    end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 The benefits of the\'a0
\i before
\i0 \'a0statement might not be so apparent in this simple example, but as you add more tests, it will make your tests more concise and easier to understand. Also, remember that\'a0
\i before
\i0 \'a0runs the code block before each "context" and "it" statements. In our example code, we are making sure that every time we have a new context, we have a new buyer. And inside each\'a0
\i it
\i0 \'a0block, we set the buyer's money to match the context of what we are trying to test. Let's take a look at another example.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 RSpec.describe \cf18 \strokec18 "something"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
    \cf20 \strokec20 before\cf13 \strokec13 (:each) \cf17 \strokec17 do\cf13 \strokec13  \
        Buyer.create\
    end\
    it \cf18 \strokec18 "assertion 1"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
      \cf16 \strokec16 # test code here\cf13 \strokec13 \
    end\
    it \cf18 \strokec18 "assertion 2"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
       \cf16 \strokec16 # test code here    \cf13 \strokec13 \
    end\
    it \cf18 \strokec18 "assertion 3"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
      \cf16 \strokec16 # test code here\cf13 \strokec13 \
    end\
end\
\pard\pardeftab720\sl504\sa40\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 By the time our test gets to the 3rd\'a0
\i it
\i0 \'a0statement, we would have called Buyer.create three times.\
\
\pard\pardeftab720\sl800\sa60\partightenfactor0

\b\fs48 \cf10 \strokec10 Expectations\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\fs28 \cf10 RSpec::Expectations
\b0 \cf11 \strokec11 \'a0lets you express expected outcomes on an object with the\'a0
\b \cf10 \strokec10 expect
\b0 \cf11 \strokec11 \'a0and\'a0
\b \cf10 \strokec10 to methods
\b0 \cf11 \strokec11 .\'a0For this entire course, we are just going to use the\'a0
\b \cf10 \strokec10 expect\'a0
\b0 \cf11 \strokec11 and\'a0
\b \cf10 \strokec10 to\'a0
\b0 \cf11 \strokec11 expectations in our walkthrough examples but be aware that there are other methods that can help you test your code.\'a0In this tab, we are going to introduce these other methods including\'a0
\i modifiers
\i0 \'a0and\'a0
\i matchers
\i0 .\

\b \cf10 \strokec10 Modifier -\'a0
\b0 \cf11 \strokec11 These are\'a0
\i RSpec
\i0 \'a0methods that help us read an expectation better:\
\pard\pardeftab720\sl440\partightenfactor0

\i\fs35 \cf21 \strokec21 expect\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i0\fs28 \cf11 \strokec11 \'a0
\b \cf10 \strokec10 Matchers -\'a0
\b0 \cf11 \strokec11 These usually consist of boolean operators. e.g:\
\pard\pardeftab720\sl440\partightenfactor0

\i\fs35 \cf21 \strokec21 >\
<\
>=\
<=\
==\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i0\b\fs28 \cf10 \strokec10 Predicate Matcher
\b0 \cf11 \strokec11 \'a0
\b \cf10 \strokec10 -\'a0
\b0 \cf11 \strokec11 Commonly paired with the should modifier.\
\pard\pardeftab720\sl440\partightenfactor0

\i\fs35 \cf21 \strokec21 be_valid\
be_within\
be_a_kind_of\
be_an_instance_of\
be_true\
be_false\
be_nil\
...\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\i0\b\fs28 \cf10 \strokec10 Alternative ways of writing\'a0
\i\b0 \cf11 \strokec11 should\'a0
\i0\b \cf10 \strokec10 and\'a0
\i\b0 \cf11 \strokec11 be:\'a0
\i0 \

\b \cf10 \strokec10 Example 1:\'a0
\i\b0 \cf11 \strokec11 player.ammo.should be > 10
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 player.ammo.should \cf17 \strokec17 >\cf13 \strokec13  \cf15 \strokec15 10\cf13 \strokec13 \
player.ammo.should_not \cf17 \strokec17 <=\cf13 \strokec13  \cf15 \strokec15 10\cf13 \strokec13 \
player.ammo.should_not be \cf17 \strokec17 <=\cf13 \strokec13  \cf15 \strokec15 10\cf13 \strokec13 \
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\b\fs28 \cf10 \cb1 \strokec10 Example 2:\'a0
\i\b0 \cf11 \strokec11 ninja.happy?.should be_true
\i0 \'a0(take note of the predicate method\'a0
\b \cf10 \strokec10 happy?\'a0
\b0 \cf11 \strokec11 predicate methods are boolean methods that end with a ?. These methods return either with\'a0
\i true
\i0 \'a0or\'a0
\i false
\i0 )\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 ninja.happy?.should \cf17 \strokec17 ==\cf13 \strokec13  \cf15 \strokec15 true\cf13 \strokec13 \
ninja.happy?.should_not \cf17 \strokec17 ==\cf13 \strokec13  \cf15 \strokec15 false\cf13 \strokec13 \
ninja.happy?.should_not be_\cf15 \strokec15 false\cf13 \strokec13 \
ninja.happy?.should eq \cf15 \strokec15 true\cf13 \strokec13 \
ninja.should be_happy\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 For the examples above, the important thing is for you to know that there are other ways you can compose an expectation. The best practice is create test that are\'a0readable and easy\'a0for you and\'a0other developers in your team\'a0to understand.\'a0\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\b\fs32 \cf10 \strokec10 RSpec Expectations\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 From the beginning,\'a0RSpec::Expectations provided\'a0
\b \cf10 \strokec10 should\'a0
\b0 \cf11 \strokec11 and\'a0
\b \cf10 \strokec10 should_not\'a0
\b0 \cf11 \strokec11 methods to define expectations on any object. In version 2.11, the\'a0
\b \cf10 \strokec10 expect\'a0
\b0 \cf11 \strokec11 method was introduced which is now the recommended way to define expectations on an object.\
Using the examples above, we can translate it to\'a0
\i RSpec
\i0 's\'a0
\b \cf10 \strokec10 expect\'a0
\b0 \cf11 \strokec11 and\'a0
\b \cf10 \strokec10 to\'a0
\b0 \cf11 \strokec11 format.\

\b \cf10 \strokec10 Example 1:\'a0
\b0 \cf11 \strokec11 player.ammo.should be > 10\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf20 \cb14 \strokec20 expect\cf13 \strokec13 (player.ammo).to be \cf17 \strokec17 >\cf13 \strokec13  \cf15 \strokec15 10\cf13 \strokec13 \
\cf20 \strokec20 expect\cf13 \strokec13 (player.ammo).to_not be \cf17 \strokec17 <=\cf13 \strokec13  \cf15 \strokec15 10\cf13 \strokec13 \
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\b\fs28 \cf10 \cb1 \strokec10 Example 2:\'a0
\b0 \cf11 \strokec11 ninja.happy?.should be_true\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf20 \cb14 \strokec20 expect\cf13 \strokec13 (ninja.happy?).to be_\cf15 \strokec15 true\cf13 \strokec13 \
\cf20 \strokec20 expect\cf13 \strokec13 (ninja).to be_happy\
\pard\pardeftab720\sl504\sa40\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 More info about expectation:\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/rspec/rspec-expectations/blob/master/Should.md"}}{\fldrslt \cf12 \strokec12 RSpec Expectations Documentation}}\cf12 \strokec12 \
\
\pard\pardeftab720\sl800\sa60\partightenfactor0

\b\fs48 \cf10 \strokec10 Writing Tests\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 Now that you know the most popular RSpec methods, we can start writing actual tests. We will be using one of our old assignments\'a0
\i Project
\i0 \'a0from the Ruby chapter. It should look like this:\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf17 \cb14 \strokec17 class\cf13 \strokec13  Project\
  attr_accessor :name, :description\
  \cf17 \strokec17 def\cf13 \strokec13  initialize name, description\
    @name \cf17 \strokec17 =\cf13 \strokec13  name\
    @description \cf17 \strokec17 =\cf13 \strokec13  description\
  end\
  \cf17 \strokec17 def\cf13 \strokec13  elevator_pitch\
    \cf18 \strokec18 "#\{@name\}, #\{@description\}"\cf13 \strokec13 \
  end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 There are a couple of things we must do to set up our testing environment. First, let's create a "project" folder and move our\'a0"project.rb" file into that folder. In the same folder, we will create a RSpec test file. Your folder structure should look like this:\'a0\
\pard\pardeftab720\sl340\partightenfactor0

\f5\fs24 \cf22 \cb23 \strokec22 project\
|    project.rb\
|    project_spec.rb\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 Next, let's write our test in the spec file:\
\pard\pardeftab720\sl260\sa200\partightenfactor0

\b\fs24 \cf24 \strokec24 /project/project_spec.rb\
\pard\pardeftab720\sl340\partightenfactor0

\f4\b0\fs25\fsmilli12600 \cf13 \cb14 \strokec13 require_relative \cf18 \strokec18 'project'\cf13 \strokec13  \cf16 \strokec16 # include our Project class in our spec file\cf13 \strokec13 \
RSpec.describe Project \cf17 \strokec17 do\cf13 \strokec13   \
  \cf20 \strokec20 before\cf13 \strokec13 (:each) \cf17 \strokec17 do\cf13 \strokec13  \
    @project1 \cf17 \strokec17 =\cf13 \strokec13  Project.\cf17 \strokec17 new\cf13 \strokec13 (\cf18 \strokec18 'Project 1'\cf13 \strokec13 , \cf18 \strokec18 'description 1'\cf13 \strokec13 ) \cf16 \strokec16 # create a new project and make sure we can set the name attribute\cf13 \strokec13 \
  end\
  it \cf18 \strokec18 'has a getter and setter for name attribute'\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
    @project1.name \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "Changed Name"\cf13 \strokec13  \cf16 \strokec16 # this line would fail if our class did not have a setter method\cf13 \strokec13 \
    \cf20 \strokec20 expect\cf13 \strokec13 (@project1.name).to \cf20 \strokec20 eq\cf13 \strokec13 (\cf18 \strokec18 "Changed Name"\cf13 \strokec13 ) \cf16 \strokec16 # this line would fail if we did not have a getter or if it did not change the name successfully in the previous line.\cf13 \strokec13 \
  end \
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 That's our first Rspec test ever! Let's run it and make sure it works. In your terminal\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 cd project\
rspec project_spec.rb\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 Later on, we will have multiple test files in our directory. To run the\'a0RSpec\'a0tests in the current directory, you can run the following:\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 rspec .\
\pard\pardeftab720\sl504\sa40\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 We should see 0 failures! In the next couple of tabs, we will be writing tests for assignments that we have already completed. These assignments are designed so that you can get comfortable with the RSpec syntax, rather than practice TDD methodology.\'a0
\b \cf10 \strokec10 Remember, in TDD, we first write a failing test, then produce the minimal code to pass that test, and finally refactor the code that we just wrote. Red, Green, Refactor.
\b0 \cf11 \strokec11 \
\
\pard\pardeftab720\sl800\sa60\partightenfactor0

\b\fs48 \cf10 \strokec10 RSpec testing for errors.\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 Often times, the expected output of a method call is an error. For example, if we were to have a class where we didn't establish any setters for its attributes, we might want to ensure that there is no way for anyone else to modify these attributes. If we don't establish a setter method for an attribute and someone tries to change the value of said attribute then the expected output should be a\'a0
\i\b \cf10 \strokec10 NoMethodError
\i0\b0 \cf11 \strokec11 . Another error we want to test for often is the\'a0
\i\b \cf10 \strokec10 ArgumentError
\i0\b0 \cf11 \strokec11 . This error will come up if we pass the wrong number of arguments into a method call.\
Let us use the code below as an example.\
\pard\pardeftab720\sl260\sa200\partightenfactor0

\b\fs24 \cf24 \strokec24 person/person.rb\
\pard\pardeftab720\sl340\partightenfactor0

\f4\b0\fs25\fsmilli12600 \cf17 \cb14 \strokec17 class\cf13 \strokec13  Person\
  \cf17 \strokec17 def\cf13 \strokec13  initialize name\
    @name \cf17 \strokec17 =\cf13 \strokec13  name\
  end\
end\
\pard\pardeftab720\sl260\sa200\partightenfactor0

\f0\b\fs24 \cf24 \cb1 \strokec24 person/person_spec.rb\
\pard\pardeftab720\sl340\partightenfactor0

\f4\b0\fs25\fsmilli12600 \cf13 \cb14 \strokec13 require_relative \cf18 \strokec18 'person'\cf13 \strokec13 \
RSpec.describe Person \cf17 \strokec17 do\cf13 \strokec13 \
  it \cf18 \strokec18 "can't initialize user without name"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
    expect\{Person.\cf17 \strokec17 new\cf13 \strokec13 \}.to \cf20 \strokec20 raise_error\cf13 \strokec13 (ArgumentError)\
  end\
  \
  it \cf18 \strokec18 "can't change users name"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13 \
    user \cf17 \strokec17 =\cf13 \strokec13  Person.\cf17 \strokec17 new\cf13 \strokec13  \cf18 \strokec18 "Oscar"\cf13 \strokec13 \
    expect\{user.name \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "Eduardo"\cf13 \strokec13 \}.to \cf20 \strokec20 raise_error\cf13 \strokec13 (NoMethodError)\
  end  \
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\i\b\fs28 \cf10 \cb1 \strokec10 It's important to note, that when testing for errors we will be using expect\{\} instead of expect().\'a0
\i0\b0 \cf11 \strokec11 \
We use curly-brace when you want to test the behavior. We\'a0use parenthesis when you want to test the returned value.\
\pard\pardeftab720\sl504\sa40\partightenfactor0
\cf11 \
\
Rails TDD\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 Test database\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 Up until now you have been working with the development database of your rails application. For your tests you will be using a separate test database for all of your test data. And similarly you will have a production database on your deployed instance. Each of these databases has its own set of data and can be in its own different state of migration.\
You will need to have your test database migrated in order to run your rspec tests. Under most circumstances the line\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 ActiveRecord::Migration.maintain_test_schema!
\f0\fs28 \cf11 \cb1 \strokec11 \'a0in your\'a0
\i "rails_helper.rb"
\i0 \'a0takes care of this for you and migrates your test database whenever there are any pending migrations. However if you make any modifications to an existing migration file, the test database will also need to be rebuilt. This can be done by executing\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 rake db:migrate RAILS_ENV=test
\f0\fs28 \cf11 \cb1 \strokec11 .\
\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 Run our first spec test\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 Lets run our first rspec test.\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 dojo$ rspec spec\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 \
\pard\pardeftab720\sl800\sa60\partightenfactor0

\b\fs48 \cf10 \strokec10 Factory Girl Extended\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\fs32 \cf10 Associations\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 Factory Girl makes it very easy to add an association to a factory. When you create your model using the Rails generator, it will add the association automatically. If we create a Product model, that belongs to the User model, it will look like this.\

\i spec/factories/users.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 FactoryGirl.define \cf17 \strokec17 do\cf13 \strokec13 \
  factory :user \cf17 \strokec17 do\cf13 \strokec13 \
    first_name \cf18 \strokec18 "shane"\cf13 \strokec13 \
    last_name \cf18 \strokec18 "chang"\cf13 \strokec13 \
  end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\i\fs28 \cf11 \cb1 \strokec11 spec/factories/products.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 FactoryGirl.define \cf17 \strokec17 do\cf13 \strokec13 \
  factory :product \cf17 \strokec17 do\cf13 \strokec13 \
    name \cf18 \strokec18 "MyString"\cf13 \strokec13 \
    user nil\
  end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 Then if we want to build a new product we use this:\

\i spec/models/product_spec.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 it \cf18 \strokec18 "should be a valid product"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
  \cf20 \strokec20 expect\cf13 \strokec13 (\cf20 \strokec20 build\cf13 \strokec13 (:product, user: \cf20 \strokec20 build\cf13 \strokec13 (:user))).to be_valid\
end\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f0\b\fs32 \cf10 \cb1 \strokec10 Further Simplifying the Association\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 The above association works, however we can simplify our code even further by specifying a default user association directly in our factory. This would look something like the following:\

\i spec/factories/products.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 FactoryGirl.define \cf17 \strokec17 do\cf13 \strokec13 \
  factory :product \cf17 \strokec17 do\cf13 \strokec13 \
    name \cf18 \strokec18 "MyString"\cf13 \strokec13 \
    user \cf16 \strokec16 # nil value removed\cf13 \strokec13 \
  end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\i\fs28 \cf11 \cb1 \strokec11 spec/models/product_spec.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 it \cf18 \strokec18 "should be a valid product"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
  \cf20 \strokec20 expect\cf13 \strokec13 (\cf20 \strokec20 build\cf13 \strokec13 (:product)).to be_valid \cf16 \strokec16 # build(:product) simplified\cf13 \strokec13 \
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 By removing the nil value from the user association in our :product factory, a default user from the :user factory will be created every time we build a product. So now when we build our :product we no longer need to specify a user value.\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\b\fs32 \cf10 \strokec10 Having multiple defaults (Optional)\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 Sometimes we need more than one default for our tests. For example, if we're trying to test a friend feature we would need two different users. We can set traits to create various types of users.\

\i spec/factories/users.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 FactoryGirl.define \cf17 \strokec17 do\cf13 \strokec13 \
  factory :user \cf17 \strokec17 do\cf13 \strokec13 \
    last_name \cf18 \strokec18 "Doe"\cf13 \strokec13 \
    admin \cf15 \strokec15 false\cf13 \strokec13 \
    trait :male \cf17 \strokec17 do\cf13 \strokec13  \
      first_name \cf18 \strokec18 "John"\cf13 \strokec13 \
      email \cf18 \strokec18 "john@doe.com"\cf13 \strokec13 \
    end\
    trait :female \cf17 \strokec17 do\cf13 \strokec13 \
      first_name \cf18 \strokec18 "Jane"\cf13 \strokec13 \
      email \cf18 \strokec18 "jane@doe.com"\cf13 \strokec13 \
    end\
    trait :admin \cf17 \strokec17 do\cf13 \strokec13  \
      admin \cf15 \strokec15 true\cf13 \strokec13 \
    end\
  end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 Then we can use our traits to build users like this:\

\i spec/models/user_spec.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 it \cf18 \strokec18 "should also be valid"\cf13 \strokec13  \cf17 \strokec17 do\cf13 \strokec13  \
  \cf20 \strokec20 expect\cf13 \strokec13 (\cf20 \strokec20 build\cf13 \strokec13 (:user, :male).first_name).to \cf20 \strokec20 eq\cf13 \strokec13 (\cf18 \strokec18 "John"\cf13 \strokec13 )\
  \cf20 \strokec20 expect\cf13 \strokec13 (\cf20 \strokec20 build\cf13 \strokec13 (:user, :female).first_name).to \cf20 \strokec20 eq\cf13 \strokec13 (\cf18 \strokec18 "Jane"\cf13 \strokec13 )\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 We can also use multiple traits on the same instance:\
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13   male_admin \cf17 \strokec17 =\cf13 \strokec13  build(:user, :male, :admin)\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f0\b\fs32 \cf10 \cb1 \strokec10 Dynamic Attributes (Optional)\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 We can add dynamic values to our instance attributes. This allows us to add some randomness to our tests or add attributes based off of other attributes.\'a0
\i Make sure to wrap your methods in curly braces \{\}.
\i0 \

\i spec/factories/users.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf13 \cb14 \strokec13 FactoryGirl.define \cf17 \strokec17 do\cf13 \strokec13 \
  factory :user \cf17 \strokec17 do\cf13 \strokec13 \
    first_name \cf18 \strokec18 "John"\cf13 \strokec13 \
    last_name \cf18 \strokec18 "Doe"\cf13 \strokec13 \
    full_name \{ \cf18 \strokec18 "#\{first_name\} #\{last_name\}"\cf13 \strokec13  \}\
    age \{\cf20 \strokec20 rand\cf13 \strokec13 (\cf15 \strokec15 21\cf13 \strokec13 ..\cf15 \strokec15 60\cf13 \strokec13 )\}\
  end\
end\
\pard\pardeftab720\sl600\sa80\partightenfactor0

\f0\b\fs32 \cf10 \cb1 \strokec10 Conclusion\
\pard\pardeftab720\sl504\sa40\partightenfactor0

\b0\fs28 \cf11 \strokec11 In this section, we went over the most popular Factory Girl methods. There are plenty of other useful methods and we'll cover some of them in future chapters. If you're interested in learning more now, you can check out the\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md"}}{\fldrslt \cf12 \strokec12 Factory Girl documentation}}.\
\pard\pardeftab720\sl504\sa200\partightenfactor0
\cf11 \
\pard\pardeftab720\sl800\sa60\partightenfactor0

\b\fs48 \cf10 \strokec10 Running RSpec Tests\
\pard\pardeftab720\sl760\sa80\partightenfactor0

\fs36 \cf10 Different ways to run RSpec tests\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0\fs28 \cf11 \strokec11 Lets' take a look at some different ways run our RSpec tests. We will use the Model Spec assignment you just completed.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\partightenfactor0
\ls6\ilvl0\cf11 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Run all the spec tests:\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 rspec spec
\f0\fs28 \cf11 \cb1 \strokec11 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\sa40\partightenfactor0
\ls6\ilvl0\cf11 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Run all the spec tests in a specific file:\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 rspec spec/<FOLDER>/<FILENAME>
\f0\fs28 \cf11 \cb1 \strokec11 \uc0\u8232 i.e.\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 rspec spec/models/user_spec.rb
\f0\fs28 \cf11 \cb1 \strokec11 \uc0\u8232 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 Run a specific spec test:\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 rspec spec/<FOLDER>/<FILENAME>:<LINE_NUMBER>
\f0\fs28 \cf11 \cb1 \strokec11 \uc0\u8232 i.e.\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 rspec spec/models/user_spec.rb:4
\f0\fs28 \cf11 \cb1 \strokec11 \uc0\u8232 This will run the spec test on line 4.\u8232 \
\pard\pardeftab720\sl504\sa200\partightenfactor0
\cf11 Also, keep in mind that to run a RSpec test you must run it from the root of your directory. If you\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 cd
\f0\fs28 \cf11 \cb1 \strokec11 \'a0into\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 spec/models
\f0\fs28 \cf11 \cb1 \strokec11 \'a0and then run the command\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 rspec user_spec.rb
\f0\fs28 \cf11 \cb1 \strokec11 it will not work.\
\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 Understanding our First Capybara Spec Test\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 We have introduced some new syntax in this capybara spec. All of the following are part of Capybara's DSL(Domain Specific Language).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\sa40\partightenfactor0
\ls7\ilvl0
\f4\fs25\fsmilli12600 \cf25 \cb26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 feature
\f0\fs28 \cf11 \cb1 \strokec11 \'a0and\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 scenario
\f0\fs28 \cf11 \cb1 \strokec11 \'a0are Capybara's version of\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 describe
\f0\fs28 \cf11 \cb1 \strokec11 \'a0and\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 it
\f0\fs28 \cf11 \cb1 \strokec11 \'a0respectively. They serve the same purpose as describe and it. Using\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 feature
\f0\fs28 \cf11 \cb1 \strokec11 \'a0instead of\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 describe
\f0\fs28 \cf11 \cb1 \strokec11 \'a0lets Rails know that you are writing a capybara spec.\uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\sa200\partightenfactor0
\ls7\ilvl0
\f4\fs25\fsmilli12600 \cf25 \cb26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 visit
\f0\fs28 \cf11 \cb1 \strokec11 \'a0navigates to a particular path. You can pass a string or use one of the Rails path helpers.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl504\partightenfactor0
\ls7\ilvl1
\f4\fs25\fsmilli12600 \cf25 \cb26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 visit '/blog'
\f0\fs28 \cf11 \cb1 \strokec11 \
\ls7\ilvl1
\f4\fs25\fsmilli12600 \cf25 \cb26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f4 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 visit blogs_path
\f0\fs28 \cf11 \cb1 \strokec11 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\sa40\partightenfactor0
\ls7\ilvl0
\f4\fs25\fsmilli12600 \cf25 \cb26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 click_button
\f0\fs28 \cf11 \cb1 \strokec11 \'a0will press a button or input[type="submit"]. You can select what button to press using the value of the button.\uc0\u8232 \
\ls7\ilvl0
\f4\fs25\fsmilli12600 \cf25 \cb26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 have_content
\f0\fs28 \cf11 \cb1 \strokec11 \'a0asserts that certain text content is present on the page.\uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl504\sa200\partightenfactor0
\ls7\ilvl0
\f4\fs25\fsmilli12600 \cf25 \cb26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 fill_in
\f0\fs28 \cf11 \cb1 \strokec11 \'a0will fill in fields for you. You can select what field to fill in using the label text, the name, or the id of the input.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl504\partightenfactor0
\ls7\ilvl1\cf11 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 fill_in "Title", with: "I love rails!"\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 fill_in 'post[title]', with: "I love rails!"\
\pard\pardeftab720\sl504\sa200\partightenfactor0
\cf11 Here's a cheat sheet for Capybara -\'a0\'a0\'a0{\field{\*\fldinst{HYPERLINK "https://upcase.com/test-driven-rails-resources/capybara.pdf"}}{\fldrslt \cf12 \strokec12 read more}}\
Now lets look at the error we got. We got the error\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 Unable to find field\'a0"user_first_name"
\f0\fs28 \cf11 \cb1 \strokec11 \'a0because we haven't created that field in our\'a0users view yet.\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 Adding fields to our view file and @user to users_controller\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 Following RESTFUL let's add a form to our\'a0
\i new.html.erb
\i0 \'a0file with the fields we specified in our spec test. Make sure that either the id or the name of the inputs match with the names we provided for our spec test.\

\i /app/views/users/new.html.erb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf17 \cb14 \strokec17 <\cf13 \strokec13 h1\cf17 \strokec17 >\cf13 \strokec13 Create \cf17 \strokec17 new\cf13 \strokec13  User\cf17 \strokec17 <\cf13 \strokec13 /h1\cf17 \strokec17 >\cf13 \strokec13 \
\cf17 \strokec17 <\cf13 \strokec13 % \cf17 \strokec17 if\cf13 \strokec13  flash[:notice] %\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 % flash[:notice].each \cf17 \strokec17 do\cf13 \strokec13  \cf17 \strokec17 |\cf13 \strokec13 note\cf17 \strokec17 |\cf13 \strokec13  %\cf17 \strokec17 >\cf13 \strokec13 \
    \cf17 \strokec17 <\cf13 \strokec13 p id\cf17 \strokec17 =\cf18 \strokec18 "notice"\cf17 \strokec17 ><\cf13 \strokec13 %\cf17 \strokec17 =\cf13 \strokec13  note %\cf17 \strokec17 ><\cf13 \strokec13 /p\cf17 \strokec17 >\cf13 \strokec13   \
  \cf17 \strokec17 <\cf13 \strokec13 % end %\cf17 \strokec17 >\cf13 \strokec13 \
\cf17 \strokec17 <\cf13 \strokec13 % end %\cf17 \strokec17 >\cf13 \strokec13 \
\cf17 \strokec17 <\cf13 \strokec13 form action \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "/users"\cf13 \strokec13  method \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "post"\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 input type \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 'hidden'\cf13 \strokec13  name \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "authenticity_token"\cf13 \strokec13  value \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "<%=form_authenticity_token%>"\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 label\cf17 \strokec17 >\cf13 \strokec13 First Name\cf17 \strokec17 <\cf13 \strokec13 /label\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 input type \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "text"\cf13 \strokec13  name \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "user[first_name]"\cf13 \strokec13  id \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "user_first_name"\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 label\cf17 \strokec17 >\cf13 \strokec13 Last Name\cf17 \strokec17 <\cf13 \strokec13 /label\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 input type\cf17 \strokec17 =\cf18 \strokec18 "text"\cf13 \strokec13  name\cf17 \strokec17 =\cf18 \strokec18 "user[last_name]"\cf13 \strokec13  id \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "user_last_name"\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 label\cf17 \strokec17 >\cf13 \strokec13 Email Address\cf17 \strokec17 <\cf13 \strokec13 /label\cf17 \strokec17 >\cf13 \strokec13 \
  \cf17 \strokec17 <\cf13 \strokec13 input type\cf17 \strokec17 =\cf18 \strokec18 "text"\cf13 \strokec13  name\cf17 \strokec17 =\cf18 \strokec18 "user[email]"\cf13 \strokec13  id \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "user_email"\cf17 \strokec17 >\cf13 \strokec13   \
  \cf17 \strokec17 <\cf13 \strokec13 input type \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "submit"\cf13 \strokec13  value \cf17 \strokec17 =\cf13 \strokec13  \cf18 \strokec18 "Create User"\cf17 \strokec17 >\cf13 \strokec13 \
\cf17 \strokec17 <\cf13 \strokec13 /form\cf17 \strokec17 >\cf13 \strokec13 \
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\i\fs28 \cf11 \cb1 \strokec11 /app/controllers/users_controller.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf17 \cb14 \strokec17 class\cf13 \strokec13  UsersController \cf17 \strokec17 <\cf13 \strokec13  ApplicationController\
  \cf17 \strokec17 def\cf13 \strokec13  \cf17 \strokec17 new\cf13 \strokec13 \
  end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 Run the capybara test again.\
This will result\'a0in another failure; this time with the message\'a0
\f4\fs25\fsmilli12600 \cf25 \cb26 \strokec25 The action 'create' could not be found for UsersController.
\f0\fs28 \cf11 \cb1 \strokec11 \
What this means is that the test is failing because we haven't specified a\'a0
\i create
\i0 \'a0method within our UsersController yet. Capybara clicked the button "Create User" which submitted the form which routes us to the create method of our users_controller.\
\pard\pardeftab720\sl480\sa80\partightenfactor0

\b \cf10 \strokec10 Adding a create method\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\b0 \cf11 \strokec11 Lets make this test succeed by adding a\'a0
\i create
\i0 \'a0method to our UsersController.\

\i /app/controllers/users_controller.rb
\i0 \
\pard\pardeftab720\sl340\partightenfactor0

\f4\fs25\fsmilli12600 \cf17 \cb14 \strokec17 def\cf13 \strokec13  create\
  @user \cf17 \strokec17 =\cf13 \strokec13  User.\cf17 \strokec17 new\cf13 \strokec13 (params.\cf20 \strokec20 require\cf13 \strokec13 (:user).\cf20 \strokec20 permit\cf13 \strokec13 (:first_name, :last_name, :email))\
  \cf17 \strokec17 if\cf13 \strokec13  @user.save\
    flash[:notice] \cf17 \strokec17 =\cf13 \strokec13  [\cf18 \strokec18 'User successfully created'\cf13 \strokec13 ]\
    redirect_to new_user_path\
  \cf17 \strokec17 else\cf13 \strokec13 \
    \cf16 \strokec16 #errors we need to code later\cf13 \strokec13 \
  end\
end\
\pard\pardeftab720\sl504\sa200\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 Lets run the capybara test again.\
You should now see a success message in your terminal. Our capybara test has passed!\
\
\
\pard\pardeftab720\sl504\sa40\partightenfactor0
\cf11 \
\
}